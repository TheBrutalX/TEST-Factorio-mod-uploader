name: Release

on:
  push:
    branches: 
      - main
    paths-ignore: 
      - '**.md'

permissions:
  contents: write

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
  build:
    runs-on: ubuntu-latest
    needs: [ tests ]

    steps:

      - name: App Authentication
        uses: actions/create-github-app-token@v1
        id: auth
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_KEY }}
          repositories: ${{ github.event.repository.name }}
          owner: ${{ github.repository_owner }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.auth.outputs.token }}

      - name: Set up Git
        run: |
          git config user.name 'release[bot]'
          git config user.email '${{ steps.auth.outputs.app-slug }}@github.com'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Commit bundle.js
        run: |
          git add -f dist/
          git add package-lock.json
          git commit -m 'chore(release): Added bundle.js [skip ci]'
          git push

  release:
    runs-on: ubuntu-latest
    needs: [ tests, build ]

    steps:
      
      - name: App Authentication
        uses: actions/create-github-app-token@v1
        id: auth
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_KEY }}
          repositories: ${{ github.event.repository.name }}
          owner: ${{ github.repository_owner }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.auth.outputs.token }}

      - name: Set up Git
        run: |
          git config user.name 'release[bot]'
          git config user.email '${{ steps.auth.outputs.app-slug }}@github.com'

      - name: Get version
        id: version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release tag
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
        run: |
          git tag -a ${{ env.VERSION }} -m "Release ${{ env.VERSION }}"
          git push origin "${{ env.VERSION }}"
    
      - name: Move latest tag
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
        run: |
          git tag -d latest
          git push origin :latest
          git tag -a latest -m "Release ${{ env.VERSION }}"
          git push origin latest
    


